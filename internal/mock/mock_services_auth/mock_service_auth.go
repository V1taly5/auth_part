// Code generated by MockGen. DO NOT EDIT.
// Source: /home/vito/Source/projects/pas/internal/http-server/handlers/get_tokens.go

// Package mockauth is a generated GoMock package.
package mockauth

import (
	context "context"
	models "pas/internal/models"
	reflect "reflect"

	"go.uber.org/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// GenerateTokens mocks base method.
func (m *MockAuthService) GenerateTokens(ctx context.Context, userID uuid.UUID, ip string) (*models.TokenPairs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokens", ctx, userID, ip)
	ret0, _ := ret[0].(*models.TokenPairs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokens indicates an expected call of GenerateTokens.
func (mr *MockAuthServiceMockRecorder) GenerateTokens(ctx, userID, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens", reflect.TypeOf((*MockAuthService)(nil).GenerateTokens), ctx, userID, ip)
}

// RefreshTokens mocks base method.
func (m *MockAuthService) RefreshTokens(ctx context.Context, refreshToken, ip string) (*models.TokenPairs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", ctx, refreshToken, ip)
	ret0, _ := ret[0].(*models.TokenPairs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockAuthServiceMockRecorder) RefreshTokens(ctx, refreshToken, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockAuthService)(nil).RefreshTokens), ctx, refreshToken, ip)
}
